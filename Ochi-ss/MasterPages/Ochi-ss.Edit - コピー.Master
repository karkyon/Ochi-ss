<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Ochi-ss.Edit.master.cs" Inherits="Ochi_ss.Ochi_ss_Edit" %>

<!DOCTYPE html>

<html>
<head runat="server">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>越智製作所Webオーダーシステム</title>

    <asp:ContentPlaceHolder ID="head" runat="server"></asp:ContentPlaceHolder>

    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" />
    <link rel="stylesheet" href='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/css/bootstrap.min.css' media="screen" />
    <script type="text/javascript" src='https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.3.min.js'></script>
    <script type="text/javascript" src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.3/js/bootstrap.min.js'></script>

    <style>
        * {
            font-family: "メイリオ", Meiryo, sans-serif;
            font-size: 12px;
        }

        body {
            height: 100%;
            margin: 0px;
            padding: 0px;
            color: #333333;
        }

        table {
            border-spacing: 0;
            display: table;
            /* border-collapse: collapse; レイアウトをシンプルに保ちたい場合、collapse */
            border-collapse: separate;
            box-sizing: border-box;
            text-indent: initial;
            unicode-bidi: isolate;
            border-spacing: 1px;
            border-color: gray;
            /* margin: 0 auto;         テーブルを中央揃え */
            table-layout: fixed;
        }

        tbody {
            display: table-row-group;
            vertical-align: middle;
            unicode-bidi: isolate;
            border-color: inherit;
        }
        
        tr {
            display: table-row;
            vertical-align: middle; /* 垂直方向の中央揃え */
            unicode-bidi: isolate;
            border-color: inherit;
        }

        th, td {
            border: 1px solid #c0cbdb; /* 薄い罫線 */
            display: table-cell;
            vertical-align: middle; /* 垂直方向の中央揃え */
            unicode-bidi: isolate;
        }

        td > * {
            vertical-align: middle; /* 子要素を中央揃え */
            display: block; /* 各要素を個別に配置 */
        }

        /* (入力エリア)列幅を個別に設定 */
        .col-no { width: 10px; } /* 0列目（No）の幅 */
        .col-zairyou { width: 90px; } /* 1列目（素材）の幅 */
        .col-shiagari { width: 85px; } /* 2列目（仕上り）の幅 */
        .col-kakoushiji {width: 30px; } /* 3～5列目（加工仕様 - 厚み / 巾 / 長さ）の幅 */
        .col-size-t { width: 40px; } /* 6列目（寸法 - 厚み）の幅 */
        .col-size-b { width: 70px; } /* 7列目（寸法 - 巾）の幅 */
        .col-size-a { width: 100px; } /* 8列目（寸法 - 長さ）の幅 */
        .col-kousa { width: 50px; } /* 9～12列目（公差 - 標準btn / 厚み / 巾 / 長さ）の幅 */
        .col-kousa-btn { width: 70px; } /* 9～12列目（公差 - 標準btn / 厚み / 巾 / 長さ）の幅 */
        .col-mentori { width: 75px; } /* 13～15列目（面取り - 4C / 8C）の幅 */
        .col-mentori-btn { width: 70px; } /* 13～15列目（面取り - 4C / 8C）の幅 */
        .col-mentori-sel { width: 50px; } /* 13～15列目（面取り - 4C / 8C）の幅 */
        .col-suryou { width: 70px; } /* 16列目（数量）の幅 */
        
        /* 注文確定済みのアイコン */
        .order-confirm-img {
            display: block;
            margin: 0 auto;  /* 画像を水平方向の中央に配置 */
        }
        .text-center {
            text-align: center;  /* 水平方向の中央配置 */
            vertical-align: middle; /* 垂直方向の中央配置 */
        }

        /* 無効化されたボタンの見た目を変更 */
        .disabled-btn {
            pointer-events: none;  /* クリック・ホバー無効化 */
            opacity: 0.5;  /* グレーアウト */
            cursor: default;  /* カーソルを通常にする */
        }

        /* 通常のボタンのホバー効果を削除 */
        .disabled-btn:hover {
            background-color: inherit !important;  /* ホバー時の色を変更しない */
            color: inherit !important;
            text-decoration: none !important;
        }

        /* 寸法入力フィールド用右寄せ */
        .col-size {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 18px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }
        
        /* 公差入力フィールド用右寄せ */
        .col-tolerance {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 14px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }
        
        /* 面取り量入力フィールド用右寄せ */
        .col-chamfering {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 14px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }
        
        /* 数量入力フィールド用右寄せ */
        .col-amount {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 18px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }
        
        /* (登録済み明細エリア)列幅を個別に設定 */
        .rcol-no { width: 20px; }        /* 1列目（No）の幅 */
        .rcol-order {                    /* 2列目（注文）の幅 */
            width: 20px;
            writing-mode: vertical-rl;
            display: flex;              /* Flexboxを有効化 */
            justify-content: center;    /* 水平方向（縦書きの場合は上下方向）に中央揃え */
            align-items: center;        /* 垂直方向（縦書きの場合は左右方向）に中央揃え */
            text-align: center;         /* テキストを中央揃え */
        }
        .rcol-zairyou { width: 80px; }  /* 3列目（材料）の幅 */
        .rcol-siyou { width: 80px; }			/* 2列目（②仕上り）の幅 */
        .rcol-size-t { width: 70px; }			/*6列目（④寸法 - 厚み）の幅 */
        .rcol-size-b { width: 80px; }		/*7列目（④寸法 - 巾）の幅 */
        .rcol-size-a { width: 80px; }		/*8列目（④寸法 - 長さ）の幅 */
        .rcol-kousa { width: 60px; }			/*9～12列目（⑤公差 - 標準btn / 厚み / 巾 / 長さ）の幅 */
        .rcol-mentori { width: 50px; }		/*13～15列目（⑥面取り - 4C / 8C）の幅 */
        .rcol-mentori-detail { width: 60px; }		
        .rcol-suryou { width: 50px; }		/*16列目（⑦数量）の幅 */
        .rcol-nouki { width: 80px; }
        .rcol-order-no { width: 120px; }	
        .rcol-uprice { width: 70px; }
        .rcol-price { width: 80px; }
        .rcol-suggested-price { width: 80px; }
        .rcol-btn {
            width: 55px;
            vertical-align: middle; /* 縦方向の中央揃え */
            text-align: center; /* 横方向の中央揃え */
        }

        /* 削除ボタン専用のスタイル - より強いセレクタを使う */
        .button-style.delete-button {
            background-color: #dc3545; /* 赤色 */
            color: white; /* 文字色は白 */
        }
        .button-style.delete-button:hover {
            background-color: #f8d7da; /* 薄いピンク */
            color: #dc3545; /* 文字色は通常時の赤 */
        }

        /* (登録済み明細エリア)編集・削除AタグをButton風に変更 */
        .button-style {
            width: 60px;
            display: inline-block;
            padding: 4px 8px;
            font-size: 14px;
            color: white;
            background-color: #007bff; /* ボタンの背景色 */
            border: none;
            border-radius: 4px;
            text-align: center;
            text-decoration: none; /* 下線を削除 */
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
                
        /* 公差、面取り量フィールド用右寄せ */
        .tolerance-cell {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 10px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }

        /* 金額フィールド用右寄せ */
        .number-cell {
            text-align: right; /* 数値を右寄せ */
            padding: 4px 8px; /* セル内の余白 */
            font-family: Arial, sans-serif; /* 読みやすいフォント */
            font-size: 14px; /* 適切なフォントサイズ */
            white-space: nowrap; /* 数値が改行されないようにする */
        }

        .total-cell {
            text-align: right; /* 右寄せ */
            font-size: large; /* フォントサイズをLargeに */
            background-color: #e6f7ff; /* 背景色を薄い青 */
            color: #003366; /* 文字色を濃い紺色 */
            border: 1px solid #cce7ff; /* 境界線の色 */
            border-radius: 4px; /* 角を少し丸める */
            padding: 5px; /* 内側の余白 */
            width: 100%; /* 必要に応じて幅を調整 */
            box-sizing: border-box; /* パディングを含めて幅を計算 */
        }

        .date-cell {
            text-align: center; /* 中央寄せ */
            font-size: large; /* フォントサイズをLargeに */
            background-color: #e6f7ff; /* 背景色を薄い青 */
            color: #003366; /* 文字色を濃い紺色 */
            border: 1px solid #cce7ff; /* 境界線の色 */
            border-radius: 4px; /* 角を少し丸める */
            padding: 5px; /* 内側の余白 */
            width: 100%; /* 必要に応じて幅を調整 */
            box-sizing: border-box; /* パディングを含めて幅を計算 */
        }
        .total-cell[readonly] {
            background-color: #e6f7ff; /* readonlyでも背景色を薄い青に */
            cursor: not-allowed; /* マウスカーソルを変更 */
        }

        .button-style:hover {
            background-color: #f0f0f0; /* ホバー時の背景色 (薄いグレー) */
            color: #007bff; /* ホバー時の文字色 */
            border: 1px solid #007bff; /* ホバー時に枠線を追加 */
            text-decoration: none; /* 下線を削除 */
        }

        .button-style:active {
            background-color: #d6d6d6; /* クリック時の背景色 (少し濃いグレー) */
            color: #0056b3; /* クリック時の文字色 */
            text-decoration: none; /* 下線を削除 */
        }

        .single.tlbl {
            border: solid 1px #c0cbdb;
            background-color: #e1e9f1;
            color: initial;
            min-width: 20px;
            vertical-align: middle; /* 垂直方向の中央揃え */
            padding: 1px 2px 1px 2px;
        }
        
        .multi.tlbl {
            border: solid 1px #c0cbdb;
            background-color: #e1e9f1;
            color: initial;
            min-width: 20px;
            vertical-align: middle; /* 垂直方向の中央揃え */
            padding: 1px 2px 1px 2px;
        }

        .middle {
            display: flex;
            flex-direction: column; /* 子要素を縦に並べる */
            justify-content: center; /* 縦方向に中央揃え */
            align-items: center; /* 水平方向に中央揃え */
            text-align: center;
        }

        .inline-block {
            display: inline-block;
            vertical-align: middle; /* 垂直方向の位置も調整 */
        }

        .logo {
            max-width: 300px; /* ロゴ画像の最大幅を指定 */
            height: auto;
            margin-bottom: 30px; /* ログインフォームとの間隔 */
        }

        .btn {
            width: 100%; /* ボタンをセル内で幅いっぱいに */
        }

        form {
            width: 100%; /* 必要に応じて幅を調整 */
            max-width: 1200px; /* フォーム全体の幅を揃える */
        }

        .form-control {
            margin: 0 auto; /* 入力フィールドを中央揃え */
            text-align: left; /* プレースホルダーとテキストの整列 */
        }

        .btn-primary {
            margin-top: 10px; /* ボタンと入力欄の間隔 */
            display: block;
            width: 100%; /* 必要に応じて全幅を指定 */
        }

        /* 全体のテーブルスタイル */
        .TopButtonArea {
            display: flex; /* フレックスボックスを有効化 */
            flex-direction: column; /* 子要素を縦に並べる */
            border: none; /* 枠線をなくす */
            max-width: 1200px; /* 最大幅を指定 */
            margin: 0 auto; /* 中央揃え */
            padding: 0; /* テーブル全体の余白をなくす */
            font-size: 25px; /* フォントサイズ */
            font-weight: bold; /* 太字 */
            text-align: center; /* テキストを中央揃え */
            border-collapse: collapse; /* テーブルの余白を消す */
        }

        /* タイトル部分のスタイル */
        .TopButtonArea tr:first-child td {
            text-align: center; /* 中央揃え */
            font-size: 22px; /* タイトルの文字サイズ */
            font-weight: bold; /* 太字 */
            padding: 5px 0; /* 上下の余白を減らす */
            line-height: 1.2; /* 行間を縮める */
        }

        /* ボタン部分のスタイル */
        .TopButtonArea tr:last-child td {
            display: inline-block; /* ボタンを横並びに */
            text-align: center; /* テキストを中央揃え */
            padding: 0; /* セル内の余白をなくす */
            margin: 0; /* セル自体の余白をなくす */
            border: none; /* 枠線をなくす */
        }

        /* ボタンのスタイル */
        .TopButtonArea .btn {
            display: inline-block; /* ボタンを横並びにする */
            width: 130px; /* ボタンの幅を統一 */
            padding: 6px 8px; /* 上下と左右の余白を小さく */
            font-size: 14px; /* ボタンのフォントサイズ */
            text-align: center; /* テキストを中央揃え */
            line-height: 1; /* ボタン内の高さを抑える */
            border-radius: 4px; /* ボタンの角丸 */
            margin: 0 5px; /* ボタン間の左右余白を追加 */
        }

        /* テーブル全体の枠線を消す */
        .TopButtonArea td {
            border: none; /* 枠線を完全に消す */
        }

        /* タイトル部分のテーブルのスタイル */
        .title-table {
            margin-top: 20px; /* 上の要素との間隔を追加 */
            border: none; /* 枠線をなくす */
            background-color: #d8e9f5; /* 淡い青色 */
            color: #333333; /* ダークグレーの文字 */
            font-size: 14px; /* フォントサイズを少し小さめに */
            font-weight: bold; /* 太字 */
            border-radius: 6px 6px 0 0; /* 上側だけ角を丸くする */
            padding: 2px 10px; /* 内側の余白を小さめに調整 */
            text-align: center; /* テキストを中央揃え */
            max-width: 1200px; /* 最大幅を指定 */
        }

        /* テーブル内のセルのスタイル */
        .title-table td {
            padding: 2px 2px; /* セル内の余白を小さく */
            border: none; /* セルの枠線を消す */
            vertical-align: middle; /* 垂直方向の中央揃え */
        }

        input[type="checkbox"] {
            display: block;
            margin: auto; /* 水平中央揃え */
        }
        
    </style>

    <script type="text/javascript">
        function toggleCheckboxes(button) {
            // GridView の全てのチェックボックスを取得
            var checkboxes = document.querySelectorAll("input[id*='ChkSelect']:not([disabled])");

            // ボタンの現在の表示を取得
            var isSelecting = button.value === "すべて選択";

            // チェック状態を切り替え（ボタンの表示通りに設定）
            checkboxes.forEach(cb => cb.checked = isSelecting);

            // ボタンのテキストを切り替え
            button.value = isSelecting ? "すべて解除" : "すべて選択";
        }

        function validateSelection() {
            var checkboxes = document.querySelectorAll('[id$="ChkSelect"]');
            var checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;

            if (checkedCount === 0) {
                alert("明細が1件も選択されていません。処理を中断します。");
                return false; // サーバー処理を中断
            }

            return confirm("ご注文の確認画面へ移動します。よろしいですか？");
        }

        document.addEventListener("DOMContentLoaded", function () {
            // ------------------------------------
            // 共通初期化
            // ------------------------------------

            // 対象となるコントロールのセレクタ
            const focusableElementsSelector = "input, select, textarea, button, a";

            // 全フォーカス可能なコントロールを取得
            const focusableElements = Array.from(document.querySelectorAll(focusableElementsSelector));

            // ------------------------------------
            // Enter キーでフォーカス移動
            // ------------------------------------
            focusableElements.forEach((element, index) => {
                element.addEventListener("keypress", function (event) {
                    if (event.key === "Enter") {
                        event.preventDefault(); // デフォルトの Enter キー動作を防止

                        let nextIndex = index + 1;

                        // 次のフォーカス対象を探す（循環処理）
                        while (nextIndex < focusableElements.length && focusableElements[nextIndex].disabled) {
                            nextIndex++;
                        }

                        if (nextIndex < focusableElements.length) {
                            focusableElements[nextIndex].focus();
                        }
                    }
                });
            });

            // ------------------------------------
            // 公差符号付き表示（公差）
            // ------------------------------------
            const formatToleranceInput = (input) => {
                let value = parseFloat(input.value);
                if (!isNaN(value)) {
                    if (value === 0) {
                        input.value = "0.00"; // 0.00 の場合は符号なし
                    } else {
                        input.value = value > 0 ? `+${value.toFixed(2)}` : value.toFixed(2);
                    }
                }
            };

            // 公差フィールドのフォーマット
            document.querySelectorAll(".col-tolerance").forEach(input => {
                input.addEventListener("blur", function () {
                    formatToleranceInput(this);
                });
                input.addEventListener("focus", function () {
                    // フォーカス時に「+」を削除し生の数値にする
                    this.value = this.value.replace(/^\+/, "");
                });
            });

            // ------------------------------------
            // 小数第１位までの数値（面取り量）
            // ------------------------------------
            const formatChamferingInput = (input) => {
                let value = parseFloat(input.value);
                if (!isNaN(value)) {
                    if (value === 0) {
                        input.value = "0.0"; // 0.00 の場合は符号なし
                    } else {
                        input.value = value.toFixed(1);
                    }
                }
            };

            // 面取り量フィールドのフォーマット
            document.querySelectorAll(".col-chamfering").forEach(input => {
                input.addEventListener("blur", function () {
                    formatChamferingInput(this);
                });
                input.addEventListener("focus", function () {
                    // フォーカス時に「+」を削除し生の数値にする
                    this.value = this.value.replace(/^\+/, "");
                });
            });

            // ------------------------------------
            // 公差入力値Validation
            // ------------------------------------
            const upperKousa_T = document.getElementById("Kousa_T_U");
            const lowerKousa_T = document.getElementById("Kousa_T_L");
            const upperKousa_A = document.getElementById("Kousa_A_U");
            const lowerKousa_A = document.getElementById("Kousa_A_L");
            const upperKousa_B = document.getElementById("Kousa_B_U");
            const lowerKousa_B = document.getElementById("Kousa_B_L");

            const validateTolerance = (surface) => {
                let upper, lower;

                switch (surface) {
                    case "T":
                        if (!upperKousa_T || !lowerKousa_T) return;
                        upper = parseFloat(upperKousa_T.value.replace("+", ""));
                        lower = parseFloat(lowerKousa_T.value.replace("+", ""));
                        break;
                    case "A":
                        if (!upperKousa_A || !lowerKousa_A) return;
                        upper = parseFloat(upperKousa_A.value.replace("+", ""));
                        lower = parseFloat(lowerKousa_A.value.replace("+", ""));
                        break;
                    case "B":
                        if (!upperKousa_B || !lowerKousa_B) return;
                        upper = parseFloat(upperKousa_B.value.replace("+", ""));
                        lower = parseFloat(lowerKousa_B.value.replace("+", ""));
                        break;
                    default:
                        console.error("無効な surface 指定: " + surface);
                        return;
                }

                console.log(`surface: ${surface}, upper: ${upper}, lower: ${lower}`);

                if (!isNaN(upper) && !isNaN(lower) && upper < lower) {
                    alert("上限値は下限値以上である必要があります。");
                    switch (surface) {
                        case "T":
                            upperKousa_T.value = "";
                            upperKousa_T.focus();
                            break;
                        case "A":
                            upperKousa_A.value = "";
                            upperKousa_A.focus();
                            break;
                        case "B":
                            upperKousa_B.value = "";
                            upperKousa_B.focus();
                            break;
                    }
                }
            };

            upperKousa_T.addEventListener("blur", () => validateTolerance("T"));
            lowerKousa_T.addEventListener("blur", () => validateTolerance("T"));
            upperKousa_A.addEventListener("blur", () => validateTolerance("A"));
            lowerKousa_A.addEventListener("blur", () => validateTolerance("A"));
            upperKousa_B.addEventListener("blur", () => validateTolerance("B"));
            lowerKousa_B.addEventListener("blur", () => validateTolerance("B"));

            // ------------------------------------
            // テキストボックスにフォーカス時、全選択
            // ------------------------------------
            document.querySelectorAll("input[type='text']").forEach((input) => {
            input.addEventListener("focus", function () {
                this.select();
            });
        });

        // ------------------------------------
        // 行のハイライト処理 (rowspan 対応)
        // ------------------------------------
        const rows = document.querySelectorAll("tr");
        rows.forEach((row, index) => {
            row.addEventListener("mouseenter", function () {
                toggleRowHighlight(row, index, rows, true);
            });

            row.addEventListener("mouseleave", function () {
                toggleRowHighlight(row, index, rows, false);
            });
        });

        function toggleRowHighlight(currentRow, currentIndex, allRows, highlight) {
            const backgroundColor = highlight ? "#d5e6ff" : ""; // ホバー色
            const cells = currentRow.children;

            for (let cell of cells) {
                const rowspan = parseInt(cell.getAttribute("rowspan") || "1", 10);

                for (let i = 0; i < rowspan; i++) {
                    if (allRows[currentIndex + i]) {
                        allRows[currentIndex + i].style.backgroundColor = backgroundColor;
                    }
                }
            }

            currentRow.style.backgroundColor = backgroundColor;
        }

        // ------------------------------------
        // 入力変更時のボタン制御と再チェック
        // ------------------------------------

        // コントロール変更時のイベントを設定
        initializeInputHandlers();

        function initializeInputHandlers() {
            const inputs = document.querySelectorAll("[data-trigger-change]");
            inputs.forEach((input) => {
                input.addEventListener("input", handleInputChange); // 入力が変更された場合
            });
        }

        function handleInputChange(event) {
            const addButton = document.getElementById("BtnAddRecord");

            // ボタンの有効/無効を制御
            if (addButton) {
                // 全ての対象入力が空でない場合にボタンを有効化
                const inputs = document.querySelectorAll("[data-trigger-change]");
                const allFilled = Array.from(inputs).every(input => input.value.trim() !== "");

                addButton.disabled = !allFilled;
            }
        }

        // ------------------------------------
        // 既存の SetDestCd 関数
        // ------------------------------------
        window.SetDestCd = function (val) {
            document.form.DistCompCd.value = val;
        };
    });
    </script>

</head>
<body>
    <div class="middle">
        <div class="logo">
            <asp:Image ID="LogoImg" runat="server" ImageUrl="~/Images/Grayscale_logo_m.png"></asp:Image>
            <asp:Image ID="Image1" runat="server" ImageUrl="~/Images/titleR_logo.png"></asp:Image>
            <asp:Label ID="lblSessionID" runat="server"></asp:Label>
        </div>
        <asp:ContentPlaceHolder ID="ContentPlaceHolder1" runat="server"></asp:ContentPlaceHolder>
    </div>
</body>
</html>
